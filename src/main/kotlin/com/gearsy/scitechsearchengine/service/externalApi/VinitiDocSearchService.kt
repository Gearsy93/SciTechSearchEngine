package com.gearsy.scitechsearchengine.service.externalApi

import com.gearsy.scitechsearchengine.config.properties.VinitiECatalogProperties
import io.github.bonigarcia.wdm.WebDriverManager
import jakarta.annotation.PreDestroy
import org.openqa.selenium.chrome.ChromeDriver
import org.openqa.selenium.By
import org.openqa.selenium.JavascriptExecutor
import org.openqa.selenium.Keys
import org.openqa.selenium.support.ui.WebDriverWait
import org.openqa.selenium.support.ui.ExpectedConditions
import org.openqa.selenium.support.ui.Select
import org.slf4j.LoggerFactory
import org.springframework.stereotype.Service
import java.time.Duration

@Service
class VinitiDocSearchService(
    vinitiECatalogProperties: VinitiECatalogProperties
) {

    private val logger = LoggerFactory.getLogger(VinitiDocSearchService::class.java)

    // –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∞–π—Ç–æ–≤ –í–ò–ù–ò–¢–ò
    private val startPageUrl = vinitiECatalogProperties.startPageUrl
    private val username = vinitiECatalogProperties.username
    private val password = vinitiECatalogProperties.password

    // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥—Ä–∞–π–≤–µ—Ä–∞
    private lateinit var driver: ChromeDriver
    private lateinit var wait: WebDriverWait
    private lateinit var jsExecutor: JavascriptExecutor

    // –¢—Ä–µ–±—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    val minimumDocumentCount = 10

    @PreDestroy
    fun cleanup() {
        driver.quit()

        // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã Chrome –∏ ChromeDriver
        Runtime.getRuntime().exec("taskkill /F /IM chromedriver.exe /T")
    }

    fun makeRequest() {

        val cscstiRubricCipher = "27.17.23"

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞
        driver = ChromeDriver()
        wait = WebDriverWait(driver, Duration.ofSeconds(10))
        jsExecutor = driver as JavascriptExecutor
        WebDriverManager.chromedriver().setup()

        // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        processAuth() //üëÜ

        // –í—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞ –Ω–∞ —Ä—É–±—Ä–∏–∫–∏ –ì–†–ù–¢–ò
        processSearchParams(cscstiRubricCipher)

        // –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (—Å—Ç–∞—Ç—å–∏ –∑–∞ 2 –≥–æ–¥–∞)
        processCategoryChoice()

        // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        processPagesData()
    }

    fun processAuth() {

        // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–∏—Å–∫–∞
        driver.get(startPageUrl)

        // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        wait.until { jsExecutor.executeScript("return document.readyState") == "complete" }

        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞
        val loginField = wait.until(
            ExpectedConditions.visibilityOfElementLocated(By.id("ctl00_UserLogin"))
        )
        loginField.sendKeys(username)

        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
        val passwordField = wait.until(
            ExpectedConditions.visibilityOfElementLocated(By.id("ctl00_UserPass"))
        )
        passwordField.sendKeys(password, Keys.ENTER) // –í–≤–æ–¥–∏–º –ø–∞—Ä–æ–ª—å –∏ –Ω–∞–∂–∏–º–∞–µ–º Enter

        // –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
        wait.until(
            ExpectedConditions.presenceOfElementLocated(By.tagName("body"))
        )
    }


    fun processSearchParams(cscstiRubricCipher: String) {

        // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–∏—Å–∫–∞
        driver.get(startPageUrl)

        // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

        wait.until { jsExecutor.executeScript("return document.readyState") == "complete" }

        // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—É–Ω–∫—Ç–∞ "–û–±—â–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤"
        val radioButton = wait.until(
            ExpectedConditions.elementToBeClickable(By.id("ctl00_ContentPlaceHolder1_RBList_1_1"))
        )
        radioButton.click()
        println("–í—ã–±—Ä–∞–Ω –ø—É–Ω–∫—Ç —Å –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏ –ø–æ–∏—Å–∫–∞ (radioButton)")

        // –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –ø—É–Ω–∫—Ç–æ–≤ –ø–æ –≤—ã–±–æ—Ä—É –∫—Ä–∏—Ç–µ—Ä–∏—è –ø–æ–∏—Å–∫–∞
        val criteriaSpanContainer = wait.until(
            ExpectedConditions.visibilityOfElementLocated(By.id("ctl00_ContentPlaceHolder1_CBList_1"))
        )

        // –û–∂–∏–¥–∞–Ω–∏–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ —á–µ–∫–±–æ–∫—Å–∞ —Ä—É–±—Ä–∏–∫–∏ –ì–†–ù–¢–ò
        val cscstiCheckbox = wait.until(
            ExpectedConditions.elementToBeClickable(By.id("ctl00_ContentPlaceHolder1_CBList_1_3"))
        )
        cscstiCheckbox.click()

        // –í–≤–æ–¥ —à–∏—Ñ—Ä–∞ –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        val searchInput = wait.until(
            ExpectedConditions.elementToBeClickable(By.id("ctl00_ContentPlaceHolder1_TBSearch_1"))
        )

        // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        val initialValue = searchInput.getAttribute("value")

        // –í–≤–æ–¥–∏–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
        searchInput.sendKeys(cscstiRubricCipher)

        // –ù–∞–π—Ç–∏ –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ <select>
        val dropdown = wait.until(
            ExpectedConditions.presenceOfElementLocated(By.id("ctl00_ContentPlaceHolder1_DDLSearch_1"))
        )

        // –°–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç Select –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—ã–ø–∞–¥–∞—é—â–∏–º —Å–ø–∏—Å–∫–æ–º
        val select = Select(dropdown)

        // –í—ã–±—Ä–∞—Ç—å –ø—É–Ω–∫—Ç —Å value="E" (–¢–æ—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç)
        select.selectByValue("E")

        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–ø—Ü–∏—è
        val selectedOption = select.firstSelectedOption
        if (selectedOption.getAttribute("value") == "E") {
            println("–û–ø—Ü–∏—è '–¢–æ—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç' —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω–∞.")
        } else {
            throw IllegalStateException("–û—à–∏–±–∫–∞: –í—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –ø—É–Ω–∫—Ç –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º —Å–ø–∏—Å–∫–µ!")
        }

        // –û–∂–∏–¥–∞–µ–º, –ø–æ–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è –≤ –ø–æ–ª–µ
        wait.until {
            val currentValue = searchInput.getAttribute("value")
            currentValue == cscstiRubricCipher
        }

        searchInput.sendKeys(Keys.RETURN)
    }

    private fun processCategoryChoice() {

        // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ iframe –∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –Ω–µ–≥–æ
        wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt(By.id("ctl00_ContentPlaceHolder1_data_frame")))

        // –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ <nobr>, —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ –Ω—É–∂–Ω—ã–π —á–µ–∫–±–æ–∫—Å
        val nobrContainer = wait.until(
            ExpectedConditions.presenceOfElementLocated(
                By.xpath(".//nobr[input[@type='checkbox' and @value='eARTC']]")
            )
        )

        // –û–∂–∏–¥–∞–Ω–∏–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ —Å—Å—ã–ª–∫–∏ –≤–Ω—É—Ç—Ä–∏ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        val resultLink = wait.until(
            ExpectedConditions.elementToBeClickable(nobrContainer.findElement(By.cssSelector("a.ResultTitle")))
        )

        // –ö–ª–∏–∫–∞–µ–º –ø–æ —Å—Å—ã–ª–∫–µ
        resultLink.click()
    }

    fun processPagesData() {

        // –û–∫–æ–Ω—á–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        wait.until { jsExecutor.executeScript("return document.readyState") == "complete" }



        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        val totalFoundDocumentCount = 0

        //  .‚Äî —Ä—É—Å—Å–∫–∏–π; —Ä–µ–∑. –∞–Ω–≥–ª–∏–π—Å–∫–∏–π

        do {
            // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ iframe –∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –Ω–µ–≥–æ
            wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt(By.id("ctl00_ContentPlaceHolder1_data_frame")))

            // –¢–∞–±–ª–∏—Ü–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            // –ù–∞–π—Ç–∏ —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
            val resultTable = wait.until(
                ExpectedConditions.presenceOfElementLocated(By.id("ResultTable"))
            )

            // –ù–∞–π—Ç–∏ tbody –≤ —Ç–∞–±–ª–∏—Ü–µ
            val tbody = resultTable.findElement(By.tagName("tbody"))

            // –ò–∑–≤–ª–µ—á—å –≤—Å–µ <tr>, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è –ø—Ä—è–º—ã–º–∏ –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ tbody
            val rows = tbody.findElements(By.xpath("./tr"))

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Ç—Ä–æ–∫
            if (rows.isEmpty()) {
                println("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ.")
                return
            }

            // –£–¥–∞–ª–∏—Ç—å –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (–æ–±—ã—á–Ω–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã)
            val dataRows = rows.drop(1)

            // –¶–∏–∫–ª –ø–æ –æ—Å—Ç–∞–≤—à–∏–º—Å—è —Å—Ç—Ä–æ–∫–∞–º
            for (row in dataRows) {
                // –ù–∞–π—Ç–∏ 3 –ø–µ—Ä–≤—ã—Ö td
                val cells = row.findElements(By.xpath("./td"))
                if (cells.size < 3) continue  // –ü—Ä–æ–ø—É—Å–∫, –µ—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ç–æ–ª–±—Ü–æ–≤

                val fullFormTdTag = cells[1]  // –í—Ç–æ—Ä–æ–π td
                val titleTdTag = cells[2]     // –¢—Ä–µ—Ç–∏–π td

                // –ò–∑–≤–ª–µ—á—å –≤–ª–æ–∂–µ–Ω–Ω—ã–π <a> –∏–∑ fullFormTdTag
                val documentPageTag = fullFormTdTag.findElement(By.tagName("a"))

                // –í—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
                println("Full Form TD: ${fullFormTdTag.text}")
                println("Title TD: ${titleTdTag.text}")
                println("Document Page Link: ${documentPageTag.getAttribute("href")}")
            }


            // TODO –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            // –£—Å–ª–æ–≤–∏–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ü–∏–∫–ª–∞

        } while (true)

    }
}

